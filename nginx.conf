events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # 로그 설정
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # 업스트림 서버 설정
    upstream springboot {
        server tdc-app:8080;
        keepalive 32;
    }

    # HTTP 서버 (80포트) - HTTPS로 리다이렉트
    server {
        listen 80;
        server_name i13a607.p.ssafy.io www.tdc-game.online tdc-game.online;

        # Let's Encrypt ACME 챌린지 허용
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # HTTPS 서버 (443포트)
    server {
        # HTTP/2 문법 사용
        listen 443 ssl;
        http2 on;
        server_name i13a607.p.ssafy.io www.tdc-game.online tdc-game.online;

        # 기존 인증서
#         ssl_certificate /etc/letsencrypt/live/i13a607.p.ssafy.io/fullchain.pem;
#         ssl_certificate_key /etc/letsencrypt/live/i13a607.p.ssafy.io/privkey.pem;

        # 새로운 인증서
        ssl_certificate /etc/letsencrypt/live/www.tdc-game.online/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/www.tdc-game.online/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # 보안 헤더
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # 웹소켓 전용 엔드포인트 (/ws)
        location /ws {
            proxy_pass http://springboot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 86400s;
            proxy_buffering off;
        }

        # API 요청은 백엔드로 프록시
        location /api {
            proxy_pass http://springboot;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            proxy_intercept_errors off;
        }

        # 정적 파일 서빙
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            root /usr/share/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            try_files $uri =404;
            log_not_found off;
            access_log off;
        }

        location ~* \.(webmanifest|manifest\.json)$ {
            root /usr/share/nginx/html;
            expires 1d;
            add_header Cache-Control "public";
            try_files $uri =404;
        }

        location = /favicon.ico {
            root /usr/share/nginx/html;
            expires 1y;
            access_log off;
            log_not_found off;
            try_files $uri =404;
        }

        location = /robots.txt {
            root /usr/share/nginx/html;
            access_log off;
            log_not_found off;
            try_files $uri =404;
        }

        # React 앱 서빙
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;

            location ~* \.(html)$ {
                add_header Cache-Control "no-cache, no-store, must-revalidate" always;
                add_header Pragma "no-cache" always;
                add_header Expires "0" always;
            }
        }
    }

    # 웹소켓 연결 업그레이드를 위한 map 설정
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }
}
